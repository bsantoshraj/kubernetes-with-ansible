---
- hosts: all
  become: true
  gather_facts: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    sysctl_config:
      net.ipv4.ip_forward: 1
      net.bridge.bridge-nf-call-ip6tables: 1
      net.bridge.bridge-nf-call-iptables: 1 

  tasks:
  - name: Configure bridge interface
    copy: 
      dest: "/etc/netplan/50-vagrant.yaml" 
      content: |
        network:
          version: 2
          renderer: networkd
          ethernets:
            eth1:
               addresses:
               - {{ ansible_eth1.ipv4.address }}/24
            eth2:
              addresses:
              - {{ ansible_eth2.ipv4.address }}/24

          bridges:
            br2:
              addresses:
              - {{ ansible_eth2.ipv4.address }}/24
              interfaces:
              - eth2


  - name: apply netplan config
    command: netplan apply
  
  - name: Add the overlay module
    community.general.modprobe:
      name:  overlay
      state: present  



  - name: Add the br_netfilter module
    community.general.modprobe:
      name:  br_netfilter
      state: present  

  - name: modprobe kernel modulesm
    command: "{{ item }}"
    with_items:
     - modprobe overlay
     - modprobe br_netfilter

  - name: Change various sysctl-settings
    sysctl:
      name: '{{ item.key }}'
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
      ignoreerrors: yes
    with_dict: '{{ sysctl_config }}'

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0


  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for libcontainers
    apt_key:
      url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key 
      state: present

  - name: Add an apt signing key for CRI-O
    apt_key:
      url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.24/xUbuntu_20.04/Release.key
      state: present


  - name: Add apt repository for stable version of libcontainer
    apt_repository:
      repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /
      state: present

  - name: Add apt repository for stable version of CRI-O
    apt_repository:
      repo: deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.24/xUbuntu_20.04/ /
      state: present

  - name: Install CRI-O
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - cri-o
      - cri-o-runc
      - cri-tools

  - name: reload systemd
    command: systemctl daemon-reload

  - name: restart crio
    command: systemctl start crio

  - name: Add an apt signing key for kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present


  - name: Add apt repository for kubernetes
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

#  - name: Configure node ip
#    lineinfile:
#      path: /etc/default/kubelet
#      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted


  - name: Join the node to cluster
    command: sudo /vagrant/join.sh


  handlers:
  - name: crio status
    service: name=crio state=started
