---
- hosts: all
  become: true
  gather_facts: true
  tasks:


  - name: Configure bridge interface
    copy: 
      dest: "/etc/netplan/50-vagrant.yaml" 
      content: |
        network:
          version: 2
          renderer: networkd
          ethernets:
            eth1:
               addresses:
               - 192.168.50.10/24
            eth2:
              addresses:
              - 192.168.1.100/24 

          bridges:
            br2:
              addresses:
              - {{ ansible_eth2.ipv4.address }}/24
              interfaces:
              - eth2

  - name: Apply netplan settings
    command: netplan apply



  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common


  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker


  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0


  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes
  - name: remove docker runtime config
    command: sudo rm /etc/containerd/config.toml

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --pod-network-cidr=192.168.25.0/16 --apiserver-advertise-address="192.168.50.10"


  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - sudo cp -f /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - sudo chown -R vagrant:vagrant /home/vagrant/.kube 


  - name: Setup kubeconfig for root user
    command: "{{ item }}"
    with_items:
     - mkdir -p /root/.kube
     - cp -f /etc/kubernetes/admin.conf /root/.kube/config

  - name: Install calico pod network
    become: false
    command: kubectl create -f https://projectcalico.docs.tigera.io/manifests/calico.yaml
 
  - name: Apply taints
    command: "{{ item }}"
    with_items:
      - kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      - kubectl taint nodes --all node-role.kubernetes.io/master-

  - name: Generate token and create join command
    shell: |
      sudo kubeadm token generate
      sudo kubeadm token create --print-join-command > /vagrant/join.sh

  - name: Change IPVS StrictArp
    ansible.builtin.shell: "kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e 's/strictARP.* false/strictARP: true/' | kubectl apply -f -  -n kube-system "

  - name: Installing METAL LB & Network Plugin
    command: "{{ item }}"
    with_items:
      - sudo kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml
      - sudo kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml
      - sudo kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

  - name: METAL LB Config
    set_fact:
      start_address: "{{ansible_br2.ipv4.address.split('.')[0]}}.{{ansible_br2.ipv4.address.split('.')[1]}}.{{ansible_br2.ipv4.address.split('.')[2]}}.{{104}}"
      end_address: "{{ansible_br2.ipv4.address.split('.')[0]}}.{{ansible_br2.ipv4.address.split('.')[1]}}.{{ansible_br2.ipv4.address.split('.')[2]}}.{{111}}"

  - name:  creating a file with standard metallb content
    copy:
      dest: /tmp/metallb-system-config.yaml
      content: |
        # kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          namespace: metallb-system
          name: config
        data:
          config: |
            address-pools:
            - name: default
              protocol: layer2
              addresses:
              - "{{start_address}} - {{end_address}}"

  - name: Apply METAL LB yaml
    command: "kubectl apply -f /tmp/metallb-system-config.yaml"

  - name: Installing Helm
    command: "{{ item }}"
    with_items:
     - wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz -O - 
     - tar -xzvf /home/vagrant/helm-v3.4.1-linux-amd64.tar.gz 
     - sudo mv /home/vagrant/linux-amd64/helm /usr/bin
     

  - name: Verification
    command: "{{ item }}"
    with_items:
     - helm create nginx
     - helm install test-nginx ./nginx --set service.type=LoadBalancer
     - kubectl get service test-nginx

  handlers:
  - name: docker status
    service: name=docker state=started
